openapi: 3.0.1
info:
  title: Enza REST API Documentation
  description: |
    **Welcome to the Enza REST API Developer Portal. Our API provides seamless integration for instant issuing services across Africa. This portal offers all the necessary tools, detailed documentation, and API endpoints required to empower your financial operations with real-time card issuance capabilities. Explore the portal, integrate with ease, and unlock secure, efficient, and scalable instant issuing solutions.**
  version: 2025-02-16T14:26:47Z

servers:
  - url: https://uat-api.enza.cloud/TX/v1

tags:
  - name: Instant Issuing
    description: Instant Issuing Operations
  - name: Cards
    description: Cards Operations

paths:
  /instantissuing:
    post:
      operationId: instantIssuingRequest
      summary: Instant Issuing Request
      description: |
        ## Overview  
        This API endpoint lets you link a pre-produced card to a customer's account. It works in two ways:  
        1. **New customer:** Create an account *and* link the card.  
        2. **Existing customer:** Create a new account for an existing customer and link the card.  

        ## `RequestType`  
        | Scenario                | Value                       |
        |-------------------------|-----------------------------|
        | New customer            | `NewAccountNewCustomer`     |
        | Existing customer       | `NewAccountExistingCustomer`|

      tags:
        - Instant Issuing
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            example:
              RequestType: NewAccountNewCustomer
              LastName: EEE
              FirstName: Cust02
              BirthDate: 1990-01-20
              Passport: "76238310075"
              Email: test@test.com
              MobilePhone: '9991234567'
              StreetTitle: Baker's Str
              Zip: WC1X 9NX
              AccountNum: AAABBB150573
              CardRefNum: '000515'
              EmbossedName: Cust02 New

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'
              examples:
                directSuccess:
                  summary: Direct success example
                  value:
                    code: SUCCESS_REQUEST_PROCESSED
                    params:
                      requestType: NewAccountNewCustomer

        '400':
          description: Bad request – validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                validationFailure:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: RequestType

        '409':
          description: 'Conflict – card already assigned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAlreadyAssigned'
              examples:
                conflictError:
                  summary: Card already assigned example
                  value:
                    code: ERR_CARD_ALREADY_ASSIGNED
                    params:
                      message: This Card Is Already Assigned To A Customer!

        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                type: object
                required: [errorMessage]
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: Task timed out after 1.10 seconds
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: Task timed out after 1.10 seconds

  /cards/tdsenrollement:
    post:
      operationId: changeEcommerceStatus
      summary: Change E-commerce Status
      description: Modify the e-commerce status for a card by supplying `ECstatusEnable` and the card reference number.
      tags: [Cards]
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        description: Details for updating ECstatus of a card.
        content:
          application/json:
            schema:
              type: object
              required: [ECstatusEnable, CardRefNum]
              properties:
                CardRefNum:
                  type: string
                  description: Card reference number
                ECstatusEnable:
                  type: string
                  description: 'EC status: `"1"` = Enrolled, `"0"` = Not enrolled'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_ECSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Enabled
              examples:
                successResponse:
                  summary: Successful Request Example
                  value:
                    code: SUCCESS_ECSTATUS_CHANGED
                    params:
                      status: Enabled
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: CardRefNum
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: CardRefNum
        '409':
          description: 'Conflict – token not found'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_READTOKEN_DECLINED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: Token not found
              examples:
                conflictExample:
                  summary: Token not found
                  value:
                    code: ERR_READTOKEN_DECLINED
                    params:
                      missingProperty: Token not found
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/cardstatus:
    post:
      operationId: changeCardStatus
      tags: [Cards]
      summary: Change Card Status
      description: 'Change a card’s status to **Active** or **Deactivated**.'
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - CardStatus
                - CardRefNum
              properties:
                CardStatus:
                  type: string
                  description: Allowed values ⇒ **Active** | **Deactivated**
                  enum: [Active, Deactivated]   # ← this drives the drop-down
                  example: Active
                CardRefNum:
                  type: string
                  description: Unique card reference number.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARDSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Active
              examples:
                successResponse:
                  summary: Successful card-status change
                  value:
                    code: SUCCESS_CARDSTATUS_CHANGED
                    params:
                      status: Active
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: CardRefNum
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: CardRefNum
        '409':
          description: 'Conflict – card declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_CARD_DECLINED
                  params:
                    type: object
                    required:
                      - reason
                    properties:
                      reason:
                        type: string
                        example: Token not found
              examples:
                conflictExample:
                  summary: 'Card declined – token not found'
                  value:
                    code: ERR_CARD_DECLINED
                    params:
                      reason: Token not found
        '504':
          $ref: '#/components/responses/LambdaTimeout'

components:
  responses:
    LambdaTimeout:
      description: 'Gateway Timeout – task took too long'
      content:
        application/json:
          schema:
            type: object
            required: [errorMessage]
            properties:
              errorMessage:
                type: string
                example: Task timed out after 1.10 seconds
          examples:
            lambdaTimeout:
              summary: Lambda execution timed out
              value:
                errorMessage: Task timed out after 1.10 seconds

  schemas:
    SuccessEnvelope:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: SUCCESS_REQUEST_PROCESSED
        params:
          type: object
          required: [requestType]
          properties:
            requestType:
              type: string
              example: NewAccountNewCustomer

    BadRequest:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_VALIDATION_FAILED
        params:
          type: object
          required: [missingProperty]
          properties:
            missingProperty:
              type: string
              example: RequestType

    CardAlreadyAssigned:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_CARD_ALREADY_ASSIGNED
        params:
          type: object
          required: [message]
          properties:
            message:
              type: string
              example: This Card Is Already Assigned To A Customer!

    Customer:
      type: object
      required:
        [RequestType, AccountNum, CardRefNum, EmbossedName,NationalId, Passport, FirstName, LastName]
      properties:
        RequestType:
          type: string
          description: |
            - `NewAccountNewCustomer`: New customer  
            - `NewAccountExistingCustomer`: Existing customer
        CardRefNum:   { type: string }
        EmbossedName: { type: string }
        AccountNum:   { type: string }
        FirstName:
          type: string
          description: Mandatory for new customers
        MiddleName:   { type: string }
        LastName:
          type: string
          description: Mandatory for new customers
        NationalId:
          type: string
          description: Mandatory if Passport is not provided
        Passport:
          type: string
          description: Mandatory if NationalId is not provided
        BirthDate:
          type: string
          format: date          
          pattern: '^\d{4}-\d{2}-\d{2}$'   # enforces YYYY-MM-DD
          description: Date of birth in YYYY-MM-DD format
          example: '1990-01-01'       
        Email:       { type: string, format: email }
        MobilePhone: { type: string }
        StreetTitle: { type: string }
        Zip:         { type: string }

  parameters:
    apiKey:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
    contentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json
