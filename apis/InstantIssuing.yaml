openapi: "3.0.1"
info:
  title: "Enza REST API Documentation"
  description: |
    **Welcome to the Enza REST API Developer Portal. Our API provides seamless integration for instant issuing services across Africa. This portal offers all the necessary tools, detailed documentation, and API endpoints required to empower your financial operations with real-time card issuance capabilities. Explore the portal, integrate with ease, and unlock secure, efficient, and scalable instant issuing solutions.**
  version: "2025-02-16T14:26:47Z"

servers:
  - url: "https://uat-api.enza.cloud/TX/v1"

tags:
  - name: "Instant Issuing"
    description: "Instant Issuing Operations"
  - name: "Cards"
    description: "Cards Operations"

paths:
  /instantissuing:
    post:
      operationId: Instant Issuing Request
      summary: Instant Issuing Request
      description: |
        ## Overview
        This API endpoint lets you link a pre-produced card to a customer's account. It works in two ways:
        -  1- Create Account to a new Customer, and link the pre-produced card. 
        -  2- Create Account to an existing customer, and link the pre-produced card. 
        
        You can use this endpoint for both new and existing customers, depending on your needs. Make sure to provide the correct card reference number and RequestType when making the request.

        ## `RequestType`
        You **must** set the `RequestType` parameter correctly:

        - **For new customers:**      `"1-NewAccountNewCustomer"`
        - **For existing customers:** `"2-NewAccountExistingCustomer"`

        By correctly setting `RequestType` and including all required fields, you ensure that the API can create the account successfully without validation errors.
      tags:
        - Instant Issuing
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            example:
              RequestType: "NewAccountNewCustomer"
              LastName: "EEE"
              FirstName: "Cust02"
              BirthDate: "1990-01-01"
              Passport: "76238310075"
              Email: "test@test.com"
              MobilePhone: "9991234567"
              StreetTitle: "Baker's Str"
              Zip: "WC1X 9NX"
              AccountNum: "AAABBB150573"
              BranchName: "Main Branch"
              CardRefNum: "000515"
              EmbossedName: "Cust02 New"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'
              examples:
                directSuccess:
                  summary: Direct success example
                  value:
                    message: "Request: 'NewAccountNewCustomer' Processed Successfully."
        '400':
          description: Bad request – invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                MissingLastName:
                  summary: Missing LastName field
                  value:
                    errorMessage: "Bad Request: Invalid Request Body"
                    params: "{missingProperty=LastName}"
                    message: "must have required property 'LastName'"
        '409':
          description: Conflict – card already assigned
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorType
                properties:
                  errorType:
                    type: string
                    description: Error description
                    example: "This Card Is Already Assigned To A Customer!"
              examples:
                conflictError:
                  summary: Card already assigned example
                  value:
                    errorType: "This Card Is Already Assigned To A Customer!"
        '504':
          description: Gateway Timeout – task took too long
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: "Task timed out after 1.10 seconds"
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: "Task timed out after 1.10 seconds"

  /cards/tdsenrollement:
    post:
      operationId: changeEcommerceStatus
      summary: Change E-commerce Status Request
      description: This request is used to modify the e-commerce status associated with card transactions by providing ECstatus and the card reference number.
      tags:
        - Cards
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        description: Details for updating ECstatus of a card.
        content:
          application/json:
            schema:
              type: object
              required:
                - ECstatusEnable
                - CardRefNum
              properties:
                CardRefNum:
                  type: string
                  description: Card Reference Number.
                ECstatusEnable:
                  type: string
                  description: ECstatus ( "1" -> Enrolled, "0" -> Not enrolled).
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: "Success! ECstatus is successfully changed!!(Enabled)!"
              examples:
                successResponse:
                  summary: Successful Request Example
                  value:
                    message: "Success! ECstatus is successfully changed!!(Enabled)!"
        "400":
          description: Bad request response "Wrong Field in the body request"
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                  - params
                  - message
                properties:
                  errorMessage:
                    type: string
                    description: "Bad Request: Invalid Request Body"
                  params:
                    type: string
                    description: "Details of which property was missing"
                  message:
                    type: string
                    description: "Validation error message"
              examples:
                badRequestExample:
                  summary: Bad Request – Missing Required Property
                  value:
                    errorMessage: "Bad Request: Invalid Request Body"
                    params: "{missingProperty=ECstatusEnable}" 
                    message: "must have required property 'ECstatusEnable'"

        "409":
          description: Conflict response when token not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorType
                properties:
                  errorType:
                    type: string
                    description: "ReadToken Declined: Token not found"
              examples:
                conflictExample:
                  summary: ReadToken Declined – Token not found
                  value:
                    errorType: "ReadToken Declined: Token not found"

        '504':
          description: Gateway Timeout – task took too long
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: "Task timed out after 1.10 seconds"
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: "Task timed out after 1.10 seconds"

        

  /cards/cardstatus:
    post:
      operationId: changeCardStatus
      tags:
        - Cards
      summary: Change Card Status
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      description: Update the status of a card by providing the new status and the card reference number. This endpoint allows the modification of the card's current status to be "Active" or "Deactivated".
      requestBody:
        description: Request Details.
        content:
          application/json:
            schema:
              type: object
              required:
                - CardStatus
                - CardRefNum
              properties:
                CardStatus:
                  type: string
                  enum: [Active, Deactivated]
                  description: The status of the card.
                CardRefNum:
                  type: string
                  description: Card Reference Number.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
              examples:
                successResponse:
                  summary: Raw string envelope
                  value: "{message: Success! ECstatus is successfully changed!!(Active)!}"
        "400":
          description: Bad request response "Wrong Field in the body request"
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                  - params
                  - message
                properties:
                  errorMessage:
                    type: string
                    description: "Bad Request: Invalid Request Body"
                  params:
                    type: string
                    description: "Raw AJV params payload"
                    example: "{missingProperty=CardRefNum}"
                  message:
                    type: string
                    description: "Validation failure message"
                    example: "must have required property 'CardRefNum'"
              examples:
                badRequestExample:
                  summary: Bad Request – Missing Required Property
                  value:
                    errorMessage: "Bad Request: Invalid Request Body"
                    params: "{missingProperty=CardRefNum}"
                    message: "must have required property 'CardRefNum'"

        "409":
          description: Conflict – Card declined
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorType
                properties:
                  errorType:
                    type: string
                    description: "CardDeclineReason: Token not found"
              examples:
                conflictExample:
                  summary: "CardDeclineReason: Token not found"
                  value:
                    errorType: "CardDeclineReason: Token not found"
        '504':
          description: Gateway Timeout – task took too long
          content:
            application/json:
              schema:
                type: object
                required:
                  - errorMessage
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: "Task timed out after 1.10 seconds"
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: "Task timed out after 1.10 seconds"
                        
components:
  schemas:
    SuccessEnvelope:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Human-readable status message
          example: "Request: 'NewAccountNewCustomer' Processed Successfully."

    BadRequest:
      type: object
      required:
        - errorMessage
        - params
        - message
      properties:
        errorMessage:
          type: string
          description: Brief description of the error
          example: "Bad Request: Invalid Request Body"
        params:
          type: string
          description: Parameter details (e.g. which property is missing)
          example: "{missingProperty=LastName}"
        message:
          type: string
          description: Detailed validation message
          example: "must have required property 'LastName'"
          
    Customer:
      required:
        - RequestType
        - AccountNum
        - BranchName
        - CardRefNum
        - EmbossedName
        - NationalId
        - Passport
        - FirstName
        - LastName
      type: object
      properties:
        RequestType:
          type: string
          description: |
            - `1-NewAccountNewCustomer`: New customer (requires fields `FirstName`,`LastName`).
            - `2-NewAccountExistingCustomer`: Existing customer.
        BranchName:
          type: string
          enum: [GTBR]
          description: "Branch name must be `GTBR`"
        CardRefNum:
          type: string
          description: "Card Reference Number"
        EmbossedName:
          type: string
          description: "Name to emboss on the card"
        AccountNum:
          type: string
          description: "Customer's account number"
        FirstName:
          type: string
          description: "`Mandatory` for new customers (`RequestType: NewAccountNewCustomer`)"
        MiddleName:
          type: string
        LastName:
          type: string
          description: "`Mandatory` for new customers (`RequestType: NewAccountNewCustomer`)"
        NationalId:
          type: string
          description: "`Mandatory` if Passport is not provided"
        Passport:
          type: string
          description: "`Mandatory` if NationalId is not provided"
        BirthDate:
          type: string
          format: date
          example: "1990-01-01"
        Email:
          type: string
          format: email
        MobilePhone:
          type: string
        StreetTitle:
          type: string
        Zip:
          type: string
  parameters:
    apiKey:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
    contentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json
